# Proxy mode overrides
services:
  ipfs:
    ports:
      - "4001:4001"  # swarm
      - "5001:5001"  # api
    labels:
      - "traefik.enable=true"
      # Define services explicitly
      - "traefik.http.services.ipfs-gateway.loadbalancer.server.port=8080"
      - "traefik.http.services.ipfs-subdomain.loadbalancer.server.port=8080"
      
      # Main gateway
      - "traefik.http.routers.gateway.rule=Host(`${GATEWAY_DOMAIN}`)"
      - "traefik.http.routers.gateway.entrypoints=web"
      - "traefik.http.routers.gateway.middlewares=gateway-headers"
      - "traefik.http.routers.gateway.service=ipfs-gateway"
      
      # Subdomain gateway - match IPFS subdomain format
      - "traefik.http.routers.subdomain.rule=HostRegexp(`{cid:[a-z0-9]+}.ipfs.${GATEWAY_DOMAIN}`)"
      - "traefik.http.routers.subdomain.entrypoints=web"
      - "traefik.http.routers.subdomain.middlewares=subdomain-headers"
      - "traefik.http.routers.subdomain.service=ipfs-subdomain"
      
      # Headers for main gateway
      - "traefik.http.middlewares.gateway-headers.headers.customrequestheaders.Host=${GATEWAY_DOMAIN}"
      - "traefik.http.middlewares.gateway-headers.headers.customrequestheaders.X-Real-IP=${remote_addr}"
      - "traefik.http.middlewares.gateway-headers.headers.customrequestheaders.X-Forwarded-For=${remote_addr}"
      - "traefik.http.middlewares.gateway-headers.headers.customrequestheaders.X-Forwarded-Proto=${scheme}"
      # Headers for subdomain - preserve the full host
      - "traefik.http.middlewares.subdomain-headers.headers.customrequestheaders.Host={cid}.ipfs.${GATEWAY_DOMAIN}"
      - "traefik.http.middlewares.subdomain-headers.headers.customrequestheaders.X-Real-IP=${remote_addr}"
      - "traefik.http.middlewares.subdomain-headers.headers.customrequestheaders.X-Forwarded-For=${remote_addr}"
      - "traefik.http.middlewares.subdomain-headers.headers.customrequestheaders.X-Forwarded-Proto=${scheme}"
      
      # Catch-all rule for 404s
      - "traefik.http.routers.catch-all.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.catch-all.priority=1"  # Lower priority than other rules
      - "traefik.http.routers.catch-all.middlewares=error-pages"
      - "traefik.http.middlewares.error-pages.errors.status=404"
      - "traefik.http.middlewares.error-pages.errors.service=error"
      - "traefik.http.middlewares.error-pages.errors.query=/{status}.html"

  cluster:
    labels:
      - "traefik.enable=true"
      # Define service explicitly
      - "traefik.http.services.cluster-upload.loadbalancer.server.port=9095"
      
      # Upload endpoint
      - "traefik.http.routers.upload.rule=Host(`${UPLOAD_DOMAIN}`) && PathPrefix(`/api/v0/`) && (Path(`/api/v0/add`) || Path(`/api/v0/cat`) || Path(`/api/v0/pin/ls`) || Path(`/api/v0/pin/add`))"
      - "traefik.http.routers.upload.entrypoints=web"
      - "traefik.http.routers.upload.middlewares=auth,gateway-headers"
      - "traefik.http.routers.upload.service=cluster-upload"
      - "traefik.http.middlewares.auth.basicauth.usersfile=/etc/traefik/.htpasswd"

  traefik:
    ports:
      - "80:80"     # HTTP (for Cloudflare proxy)
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"
      - "--accesslog=true"
    environment:
      - GATEWAY_DOMAIN=${GATEWAY_DOMAIN}
      - UPLOAD_DOMAIN=${UPLOAD_DOMAIN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./htpasswd:/etc/traefik/.htpasswd:ro 